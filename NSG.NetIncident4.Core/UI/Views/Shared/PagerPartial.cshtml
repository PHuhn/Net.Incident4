@using NSG.PrimeNG.LazyLoading
@model NSG.NetIncident4.Core.UI.ViewModels.IPagination
@{
    // =======================================================================
    // File: PaginatorTagHelper.cs
    // Pager using the PrimeNG's LazyLoadEvent2 class
    // ReflectionIT.Mvc.Paging.IPagingList
    // example:
    // In controller:
    //   LazyLoadEvent2 event2 = new LazyLoadEvent2() {first=0, rows = 4}; 
    //   Pagination<TestData> pagination = new Pagination<TestData>(
    //     _data.Select(d => d).AsQueryable().LazySkipTake2<TestData>(event2).ToList(),
    //     event2,
    //     _data.Count
    //   )
    //   {
    //     rowsPerPageOptions = new int[3] { 4, 8, 16 }
    //   };
    // In view:
    //   @model NSG.NetIncident4.Core.UI.ViewModels.Pagination<TestData>
    //   ...
    //   <partial name="PagerPartial" model="Model" />
    var start = this.Model.GetStartWindow();
    var stop = this.Model.GetEndWindow();
    string form_url = Url.Action(Model.action, null, null, null, null, null);
}
@if (this.Model.pageCount > 1) {
    <ul class="pagination pagination justify-content-center nsg-hd-row">
        <li class='page-item @(this.Model.IsFirstPage() ? "disabled" : "")'>
            <a href="@Url.Action(Model.action, null, Model.GetRouteForPage(1), null, null, null)" aria-label="First" class='page-link'>
                <span aria-hidden="true">&laquo;</span>
            </a>
        </li>
        @if (this.Model.previousNext) {
            <li class='page-item @(this.Model.IsFirstPage() ? "disabled" : "")'>
                <a href="@Url.Action(Model.action, null, Model.GetRouteForPage(this.Model.pageIndex - 1), null, null, null)" aria-label="Previous" class='page-link'>
                    <span aria-hidden="true">&lt;</span>
                </a>
            </li>
        }
        @for (long pg = start; pg <= stop; pg++) {
            <li class="page-item @((Model.pageIndex == pg) ? "active" : null)">
                <a href="@Url.Action(Model.action, null, Model.GetRouteForPage(pg), null, null, null)" aria-label="Page @pg" class="page-link">
                    <span aria-hidden="true">@pg.ToString()</span>
                </a>
            </li>
        }
        @if (this.Model.previousNext) {
            <li class='page-item @(this.Model.IsLastPage() ? "disabled" : "")'>
                <a href="@Url.Action(Model.action, null, Model.GetRouteForPage(this.Model.pageIndex + 1))" aria-label="Next" class='page-link'>
                    <span aria-hidden="true">&gt;</span>
                </a>
            </li>
        }
        <li class='page-item @(this.Model.IsLastPage() ? "disabled" : "")'>
            <a href="@Url.Action(Model.action, null, Model.GetRouteForPage(this.Model.pageCount))" aria-label="Last" class='page-link'>
                <span aria-hidden="true">&raquo;</span>
            </a>
        </li>
        @if (this.Model.pageOptions) {
            <li class='page-item @(this.Model.rowsPerPageOptions.Count() == 0 ? "disabled" : "")'>
                <select id="pageSizeOption" onchange="pageSizeOption_onchange(this.value)" asp-for="@Model.lazyLoadEvent.rows" class="form-control" asp-items="@new SelectList(Model.rowsPerPageOptions)" style="max-width: 100px;">
                    <option value="">select</option>
                </select>
            </li>
        }
    </ul>
}
<script type="text/javascript">
    /**
    ** On change event for the page size dropdown,
    ** post the new values for the lazyLoadEvent.
    */
    function pageSizeOption_onchange(val) {
        let url = @Html.Raw(Json.Serialize(form_url));
        console.log( `Page value: ${val} ${url}` );
        if( val !== '') {
            var json = @Html.Raw(Json.Serialize(Model.lazyLoadEvent));
            json.rows = Number(val);
            json.first = 0;
            console.log(json);
            post_form( url, json );
        }
    }
    /**
    ** sends a request to the specified url from a form. this will change the window location.
    ** param {string} path the path to send the post request to
    ** param {object} params the parameters to add to the url
    ** param {string} [method=post] the method to use on the form
    */
    function post_form(path, params, method='post') {
      const form = document.createElement('form');
      form.method = method;
      form.action = path;
      for (const key in params) {
        if (params.hasOwnProperty(key)) {
          const hiddenField = document.createElement('input');
          hiddenField.type = 'hidden';
          hiddenField.name = key;
          hiddenField.value = params[key];
          form.appendChild(hiddenField);
        }
      }
      document.body.appendChild(form);
      form.submit();
    }
</script>
